function highlyDivisibleTriangleNumber(n){
  let count = 0;
  while(findFactors(nthTriangleNumber(count)).length <= n){
    count++;  
  }
  return nthTriangleNumber(count);
}

function nthTriangleNumber(n){
  return n * (n + 1) / 2;
}

function findFactors(n){
  let factors = [];
  let root = Math.floor(Math.sqrt(n));
  for(let i = 0 ; i <= root; i++){
    if(n % i === 0){
      if(i !== n / i){
        factors.push(i, n / i);
      } else {
        factors.push(i);
      }
    }
  }
  return factors;
}

// findFactors(36)
// nthTriangleNumber(6)
highlyDivisibleTriangleNumber(500); // 76576500
highlyDivisibleTriangleNumber(1)

/* ===========================================

The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:

1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

Let us list the factors of the first seven triangle numbers:

 1: 1
 3: 1,3
 6: 1,2,3,6
10: 1,2,5,10
15: 1,3,5,15
21: 1,3,7,21
28: 1,2,4,7,14,28
We can see that 28 is the first triangle number to have over five divisors.

What is the value of the first triangle number to have over five hundred divisors?

// i // num // n amount of factors to surpass
// o // num // the first number with over n factors 
// c // ---
// e // ---

Strategy: 
To find triangular numbers, we use the formula n * (n + 1) / 2
 The summation of all numbers from 1 to a number n is (n+1) / 2
 to find each triangular num, we multiply through n the curr tri num 
From there, we can simply check the factors of each number, 
  If the factors surpass n, we can return 
  Else, we increment 

*/
